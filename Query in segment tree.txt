#includebitsstdc++.h
using namespace std;
#define ll long long

void BuildSegTree(ll a, ll start, ll end, ll tree, ll index) {
	 Base case
	if (start == end) {
		tree[index] = a[start];
		return;
	}

	 Recursive case
	ll mid = (start + end)  2;
	BuildSegTree(a, start, mid, tree, 2  index);
	BuildSegTree(a, mid + 1, end, tree, 2  index + 1);

	tree[index] = min(tree[2  index], tree[2  index + 1]);
	return;

}

ll query(ll tree, ll ss, ll se, ll qs, ll qe, ll index) {

	 Complete overlap
	if ((ss = qs) && (se = qe)) {
		return tree[index];
	}

	 Partial overlap
	if ((se  qs)  (ss  qe)) {
		return INT_MAX;       Remeber to change this line as per requirements

		 for min range queries return INT_MAX
		 for max range queries return INT_MIN
		 for range sum queries return 0
	}

	 Partial overlap
	ll mid = (ss + se)  2;
	ll left = query(tree, ss, mid, qs, qe, index  2);
	ll right = query(tree, mid + 1, se, qs, qe, (2  index) + 1);
	return min(left, right);  Remeber to change this line also
}


int main() {
	ll a[] = {1, 3, 2, -5, 6, 4};
	ll n = sizeof(a)  sizeof(a[0]);
	ll tree[4  n + 1];
	BuildSegTree(a, 0, n - 1, tree, 1);
	 for (int i = 1; i = 13; i++) {
	 	cout  tree[i]   ;
	 }



	ll q;   no of queries
	cin  q;
	while (q--) {
		ll qs, qe;
		cin  qs  qe;
		ll res = query(tree, 0, n - 1, qs, qe, 1);
		cout  res  endl;
	}

	return 0;
}